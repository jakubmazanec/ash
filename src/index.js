'use strict';var _ = require('_');var $ = require('jquery');var Component = require('./core/classes/Component');var Construct = require('./core/classes/Construct');var VirtualNode = require('./core/classes/VirtualNode');var Store = require('./core/classes/Store');var Action = require('./core/classes/Action');var Renderer = require('./core/singletons/Renderer');var Events = require('./core/singletons/Events');var DOMEvents = require('./core/singletons/DOMEvents');var Router = require('./core/singletons/Router');var Promise = require('./core/externals/Promise');var getViewportWidth = require('./core/utils/getViewportWidth');var getViewportHeight = require('./core/utils/getViewportHeight');var ash = {};var VERSION = '0.1.0';_.assign(ash,{	'VERSION': VERSION,		// classes	'Construct': Construct,	'Component': Component,	'Store': Store,	'Action': Action,	// singletons	'Renderer': Renderer,	'Events': Events,	'DOMEvents': DOMEvents, // DEBUG	'Router': Router,	// externals	'Promise': Promise,	// utility functions	'e': VirtualNode.create,	'getViewportWidth': getViewportWidth,	'getViewportHeight': getViewportHeight,	$document: $(document),	$html: $('html'),	$body: $('body'),	$window: $(window)});$('html').removeClass('no-js');//import SASS variables var __style;var __removeQuotes = function (s){	return _.isString(s) ? s.replace(/^['"]+|\s+|\\|(;\s?})+|['"]$/g, '') : s;};if (window.getComputedStyle && window.getComputedStyle(document.body, '::before')){	__style = window.getComputedStyle(document.body, '::before');	__style = __style.getPropertyValue('content');	if (!__style)	{		__style = window.getComputedStyle(document.getElementsByTagName('head')[0]);		__style = __style.getPropertyValue('font-family');	}} else{	var __getComputedStyle = function (el)	{		this.el = el;		this.getPropertyValue = function (property)		{			var __regex = /(\-([a-z]){1})/g;			if (__regex.test(property))			{				property = property.replace(__regex, function ()				{						return arguments[2].toUpperCase();				});			}			return el.currentStyle[property] ? el.currentStyle[property] : null;		};		return this;		};			__style = __getComputedStyle(document.getElementsByTagName('head')[0]);	__style = __style.getPropertyValue('font-family');} // ifif (__style){	ash.sass = JSON.parse(__removeQuotes(__style));}module.exports = ash;